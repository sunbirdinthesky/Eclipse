package ui_logic;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.util.Vector;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.MouseTrackListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;

import backGround.AdsRefresh;
import backGround.DeviceRefresh;
import ftp.FtpOperations;
import ui.MainUI;
import vars.AdFile;
import vars.Device;
import vars.UploadIndex;
import vars.Vars;

public class MainUiLogic extends MainUI {
	private AdsRefresh adsRefresh;
	private DeviceRefresh deviceRefresh;
	private Thread update;
	private Vector<UploadIndex> UploadIndex = new Vector<>();
	private Vector<Text> UploadPlayCount = new Vector<>();

	/**
	 * @wbp.parser.entryPoint
	 */
	public static void main(String[] s) {
		try {
			MainUiLogic window = new MainUiLogic();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void LogicInit() {
		OptionSelect(1);
		ButtonsInit();
		adsRefresh = new AdsRefresh();
		adsRefresh.start();
		deviceRefresh = new DeviceRefresh();
		deviceRefresh.start();
		update = new Thread(){
			public void run() {
				while (!Thread.interrupted()) {
					try {
						Update();
						System.out.println("主界面已更新");
						Thread.sleep(1500);
					} catch (Exception e) {
						System.err.println("主界面更新发生错误");
						e.printStackTrace();
					}
				}
			};
		};
		update.start();
	}

	public void Update() {
		if (!deviceRefresh.isAlive()) {
			deviceRefresh = new DeviceRefresh();
			deviceRefresh.start();
		}
		if (!adsRefresh.isAlive()) {
			adsRefresh = new AdsRefresh();
			adsRefresh.start();
		}
		deviceListRefresh();
		adsListRefresh();
	}
	
	@SuppressWarnings("unchecked")
	String upload () {
		File file = new File(TextBox_Upload_FilePath.getText());
		
		if (!file.exists() || file.isDirectory()) {
			return "文件路径错误";
		}
		
		if (Combo_Upload_FileType.getSelectionIndex() == -1) {
			return "请选择文件的类别";
		}
		
		try {
			Integer.valueOf(TextBox_Upload_PlayConut.getText());
		} catch (Exception e) {
			return "请填写正确的整数";
		}
		
		boolean checked = false;
		int cnt = 0;
		UploadIndex.clear();
		for (Button tmp : Vars.UploadDevices) {
			if (tmp.getSelection()) {
				checked = true;
				UploadIndex up = new UploadIndex();
				up.imei = tmp.getText().substring(0, tmp.getText().indexOf(' '));
				try {
					up.playCount = Integer.valueOf(UploadPlayCount.get(cnt).getText());
				} catch (Exception e) {
					up.playCount = -1;
				}
				UploadIndex.add(up);
			}
			cnt++;
		}
		
		if (!checked) {
			return "请至少勾选一个设备";
		}

		String name = file.getName();
		if (name.indexOf('.') != -1)
			name = name.substring(0, name.indexOf('.'));

		for (int i = 0; i < name.length(); i++) {
			char ch = name.charAt(i);
			if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')
					|| (ch >= '0' && ch <= '9') || (ch == '_')) {
			} else {
				return "文件名中只能含有大小写字母，数字和下划线";
			}
		}

		if (checkSQL(name)) {
			return "上传失败，有同名文件存在？";
		}

		if (Combo_Upload_YearPre.getSelectionIndex() == -1
				|| Combo_Upload_YearAfter.getSelectionIndex() == -1
				|| Combo_Upload_MonthPre.getSelectionIndex() == -1
				|| Combo_Upload_MonthAfter.getSelectionIndex() == -1
				|| Combo_Upload_DayPre.getSelectionIndex() == -1
				|| Combo_Upload_DayAfter.getSelectionIndex() == -1) {
			return "请填写完整日期";
		}

		String begin = ""; // 格式化初使日期，如"2016-02-01"
		begin += Combo_Upload_YearPre.getText();
		begin += "-";
		if (Combo_Upload_MonthPre.getText().length() == 1) {
			begin += "0";
		}
		begin += Combo_Upload_MonthPre.getText();
		begin += "-";
		if (Combo_Upload_DayPre.getText().length() == 1) {
			begin += "0";
		}
		begin += Combo_Upload_DayPre.getText();

		String end = ""; // 格式化终止日期，如"2016-02-01"
		end += Combo_Upload_YearAfter.getText();
		end += "-";
		if (Combo_Upload_MonthAfter.getText().length() == 1) {
			end += "0";
		}
		end += Combo_Upload_MonthAfter.getText();
		end += "-";
		if (Combo_Upload_DayAfter.getText().length() == 1) {
			end += "0";
		}
		end += Combo_Upload_DayAfter.getText();
		
		if (end.compareTo(begin) < 0) {
			return "结束日期不应小于开始日期";
		}
		

		AdFile tmp = new AdFile();
		tmp.name = name;
		tmp.playCnt = Integer.valueOf(TextBox_Upload_PlayConut.getText());
		try {
			tmp.md5 = getMd5ByFile(file);
		} catch (Exception e) {
			return "MD5计算错误";
		}
		tmp.begin = begin;
		tmp.end = end;
		tmp.company = TextBox_Upload_Company.getText();
		tmp.Config = (Vector<vars.UploadIndex>) UploadIndex.clone();
		
		final int Mark = Combo_Upload_FileType.getSelectionIndex();
		new Thread(new Runnable() {
			@Override
			public void run() {
				FtpOperations ftpOperations = new FtpOperations();
				switch (Mark) {
				case 0:
					ftpOperations.upload(file, "/AdMachine/ads", tmp.name);
					break;
				case 1:
					ftpOperations.upload(file, "/AdMachine/repeats", tmp.name);
					break;
				}
				Display.getDefault().asyncExec(new Runnable() {
					public void run() {
						Lable_Upload_Attention.setText("上传完成");
					}
				});
				SqlUpdate("insert into ads values ("
						+ "\"" + tmp.name + "\"" + ", " + tmp.playCnt
						+ ", \"" + tmp.md5 + "\", \"" + tmp.begin 
						+ "\", \"" + tmp.end + "\", \"" + tmp.company + "\")");
				
				for (UploadIndex index : tmp.Config) {
					
				}
			}
		}).start();
		
		return "上传中，请耐心等待";
	}
	
	String getMd5ByFile(File file) throws FileNotFoundException {
		String value = null;
		FileInputStream in = new FileInputStream(file);
		try {
			MappedByteBuffer byteBuffer = in.getChannel()
					.map(FileChannel.MapMode.READ_ONLY, 0, file.length());
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			md5.update(byteBuffer);
			BigInteger bi = new BigInteger(1, md5.digest());
			value = bi.toString(16);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (null != in) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return value;
	}
	
	
	boolean checkSQL(String name) {
		boolean state = false;
		try {
			if (isConnected() || SqlInit()) {
				SqlQuery("select name from ads where name = " + "\"" + name + "\"");
				if (rSet.next()) {
					state = true;
				}
				SqlQuery("select name from repeats where name = " + "\"" + name + "\"");
				if (rSet.next()) {
					state = true;
				}
			}
			if (rSet != null && !rSet.isClosed())
				rSet.close();
		} catch (Exception e) {
			e.printStackTrace();
			System.err.println("SQL连接失败");
		}

		return state;
	}
	
	
	void deviceListRefresh() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {

				if (!Vars.DevicesFlag)
					return;

				Vars.DevicesFlag = false;
				ListDevice.dispose();
				ListDevice = new ScrolledComposite(ContainerDevice, SWT.NONE);
				ListDevice.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				ListDevice.setBounds(26, 138, 640, 534);
				
				int i = 1;
				for (Device tmp : Vars.Devices) {

					Label name = new Label(ListDevice, SWT.NONE);
					name.setBounds(10, i * 23, 180, 23);
					name.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					name.setText(tmp.imei);

					Label location = new Label(ListDevice, SWT.NONE);
					location.setBounds(270, i * 23, 120, 23);
					location.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					location.setText(tmp.location);
					
					Label setUp = new Label(ListDevice, SWT.NONE);
					setUp.setBounds(400, i * 23, 120, 23);
					setUp.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					setUp.setText(String.valueOf(tmp.setUp));

					Label nItem = new Label(ListDevice, SWT.NONE);
					nItem.setBounds(526, i * 23, 100, 23);
					nItem.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					nItem.setText(String.valueOf(tmp.nItem));
					
					Composite tigger = new Composite(ListDevice, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));

					i++;
				}

				Vars.DevicesFlag = true;

			}
		});
	}
	

	void adsListRefresh() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				if (!Vars.adsFlag)
					return;
				Vars.adsFlag = false;
				ListAds.dispose();
				ListAds = new ScrolledComposite(ContainerADs, SWT.NONE);
				ListAds.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				ListDevice.setBounds(26, 138, 640, 534);
				int i = 1;
				for (AdFile tmp : Vars.ads) {
					Label name = new Label(ListAds, SWT.NONE);
					name.setBounds(10, i * 23, 180, 23);
					name.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					name.setText(tmp.name);

					Label price = new Label(ListAds, SWT.NONE);
					price.setBounds(270, i * 23, 120, 23);
					price.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					price.setText(String.valueOf(tmp.playCnt));

					Label playcnt = new Label(ListAds, SWT.NONE);
					playcnt.setBounds(400, i * 23, 120, 23);
					playcnt.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					playcnt.setText(String.valueOf("1"));

					Label during = new Label(ListAds, SWT.NONE);
					during.setBounds(526, i * 23, 100, 23);
					during.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					during.setText(tmp.begin + '~' + tmp.end);

					Composite tigger = new Composite(ListAds, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));


					i++;
				}

				Vars.adsFlag = true;

			}
		});
	}
	

	void uploadDeviceListRefresh() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				if (!Vars.UploadDevicesFlag)
					return;
				Vars.UploadDevicesFlag = false;
				ListUpload.dispose();
				ListUpload = new ScrolledComposite(ContainerUpload, SWT.NONE);
				ListUpload.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				ListUpload.setBounds(28, 226, 648, 393);
				
				int i = 1;
				for (Device tmp : Vars.Devices) {
					Button selected = new Button(ListUpload, SWT.CHECK);
					selected.setBounds(10, i * 23, 500, 23);
					selected.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					selected.setText(tmp.imei + ' ' + tmp.location + ' ' + tmp.nItem);
					
					Text specialPlayCount = new Text(ListUpload, SWT.BORDER);
					specialPlayCount.setBounds(510, i * 23, 138, 23);
					specialPlayCount.setText("请填写播放次数");
					
					Vars.UploadDevices.add(selected);
					UploadPlayCount.add(specialPlayCount);
					i++;
				}

				Vars.UploadDevicesFlag = true;

			}
		});
	}
	

	void ButtonsInit() {

		Button_Close.addSelectionListener(new SelectionAdapter() {
			@SuppressWarnings("deprecation")
			@Override
			public void widgetSelected(SelectionEvent e) {
				update.stop();
				deviceRefresh.stop();
				adsRefresh.stop();
				shell.dispose();
			}
		});
		
		Button_Upoad.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				Lable_Upload_Attention.setText(upload());
			}
		});

		Button_AboutDevice.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Button_AboutDevice.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Button_AboutDevice
						.setBackground(SWTResourceManager.getColor(38, 18, 10));
			}
		});
		Button_AboutDevice.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				OptionSelect(1);
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		Button_AboutADs.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Button_AboutADs.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Button_AboutADs
						.setBackground(SWTResourceManager.getColor(38, 18, 10));
			}
		});
		Button_AboutADs.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				OptionSelect(2);
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		Button_AboutUpload.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Button_AboutUpload.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Button_AboutUpload
						.setBackground(SWTResourceManager.getColor(38, 18, 10));
			}
		});
		Button_AboutUpload.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				OptionSelect(3);
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});
	}
	

	void OptionSelect(int OptionNum) {
		switch (OptionNum) {
		case 1:
			ContainerDevice.setEnabled(true);
			ContainerDevice.setVisible(true);

			ContainerADs.setEnabled(false);
			ContainerADs.setVisible(false);

			ContainerUpload.setEnabled(false);
			ContainerUpload.setVisible(false);
			break;

		case 2:
			ContainerDevice.setEnabled(false);
			ContainerDevice.setVisible(false);

			ContainerADs.setEnabled(true);
			ContainerADs.setVisible(true);

			ContainerUpload.setEnabled(false);
			ContainerUpload.setVisible(false);
			break;

		case 3:
			ContainerDevice.setEnabled(false);
			ContainerDevice.setVisible(false);

			ContainerADs.setEnabled(false);
			ContainerADs.setVisible(false);

			ContainerUpload.setEnabled(true);
			ContainerUpload.setVisible(true);

			uploadDeviceListRefresh();
			break;
		}
	}
}
