package ui_logic;

import org.eclipse.swt.SWT;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.MouseTrackListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.GridData;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Composite;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.wb.swt.SWTResourceManager;

import backGround.AdsRefresh;
import backGround.DeviceRefresh;
import ui.MainUI;
import vars.AdFile;
import vars.Device;
import vars.Vars;

public class MainUiLogic extends MainUI {
	private AdsRefresh adsRefresh;
	private DeviceRefresh deviceRefresh;
	private Thread update;

	/**
	 * @wbp.parser.entryPoint
	 */
	public static void main(String[] s) {
		try {
			MainUiLogic window = new MainUiLogic();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void LogicInit() {
		OptionSelect(1);
		OptionButtonsInit();
		adsRefresh = new AdsRefresh();
		adsRefresh.start();
		deviceRefresh = new DeviceRefresh();
		deviceRefresh.start();
		update = new Thread(){
			public void run() {
				while (!Thread.interrupted()) {
					try {
						Update();
						System.out.println("主界面已更新");
						Thread.sleep(1500);
					} catch (Exception e) {
						System.err.println("主界面更新发生错误");
						e.printStackTrace();
					}
				}
			};
		};
		update.start();
	}

	public void Update() {
		if (!deviceRefresh.isAlive()) {
			deviceRefresh = new DeviceRefresh();
			deviceRefresh.start();
		}
		if (!adsRefresh.isAlive()) {
			adsRefresh = new AdsRefresh();
			adsRefresh.start();
		}
		deviceListRefresh();
		adsListRefresh();
		uploadDeviceListRefresh();
	}
	
	void deviceListRefresh() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {

				if (!Vars.DevicesFlag)
					return;

				Vars.DevicesFlag = false;
				ListDevice.dispose();
				ListDevice = new ScrolledComposite(ContainerDevice, SWT.NONE);
				ListDevice.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				ListDevice.setBounds(26, 138, 640, 534);
				
				int i = 1;
				for (Device tmp : Vars.Devices) {

					Label name = new Label(ListDevice, SWT.NONE);
					name.setBounds(10, i * 23, 180, 23);
					name.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					name.setText(tmp.imei);

					Label location = new Label(ListDevice, SWT.NONE);
					location.setBounds(270, i * 23, 120, 23);
					location.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					location.setText(tmp.location);
					
					Label setUp = new Label(ListDevice, SWT.NONE);
					setUp.setBounds(400, i * 23, 120, 23);
					setUp.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					setUp.setText(String.valueOf(tmp.setUp));

					Label nItem = new Label(ListDevice, SWT.NONE);
					nItem.setBounds(526, i * 23, 100, 23);
					nItem.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					nItem.setText(String.valueOf(tmp.nItem));
					
					Composite tigger = new Composite(ListDevice, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));

					i++;
				}

				Vars.DevicesFlag = true;

			}
		});
	}

	void adsListRefresh() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				if (!Vars.adsFlag)
					return;
				Vars.adsFlag = false;
				ListAds.dispose();
				ListAds = new ScrolledComposite(ContainerADs, SWT.NONE);
				ListAds.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				ListDevice.setBounds(26, 138, 640, 534);
				int i = 1;
				for (AdFile tmp : Vars.ads) {
					Label name = new Label(ListAds, SWT.NONE);
					name.setBounds(10, i * 23, 180, 23);
					name.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					name.setText(tmp.name);

					Label price = new Label(ListAds, SWT.NONE);
					price.setBounds(270, i * 23, 120, 23);
					price.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					price.setText(String.valueOf(tmp.playCnt));

					Label playcnt = new Label(ListAds, SWT.NONE);
					playcnt.setBounds(400, i * 23, 120, 23);
					playcnt.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					playcnt.setText(String.valueOf("1"));

					Label during = new Label(ListAds, SWT.NONE);
					during.setBounds(526, i * 23, 100, 23);
					during.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					during.setText(tmp.begin + '~' + tmp.end);

					Composite tigger = new Composite(ListAds, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));


					i++;
				}

				Vars.adsFlag = true;

			}
		});
	}

	void uploadDeviceListRefresh() {
		Display.getDefault().asyncExec(new Runnable() {
			@Override
			public void run() {
				if (!Vars.UploadDevicesFlag)
					return;
				Vars.UploadDevicesFlag = false;
				ListUpload.dispose();
				ListUpload = new ScrolledComposite(ContainerUpload, SWT.NONE);
				ListUpload.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				ListUpload.setBounds(28, 226, 648, 393);
				
				int i = 1;
				for (Device tmp : Vars.Devices) {
					Button button = new Button(ListUpload, SWT.CHECK)
					Label name = new Label(ListUpload, SWT.NONE);
					name.setBounds(10, i * 23, 180, 23);
					name.setBackground(
							SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					name.setText(tmp.imei);

					i++;
				}

				Vars.UploadDevicesFlag = true;

			}
		});
	}

	void OptionButtonsInit() {

		Button_Close.addSelectionListener(new SelectionAdapter() {
			@SuppressWarnings("deprecation")
			@Override
			public void widgetSelected(SelectionEvent e) {
				update.stop();
				deviceRefresh.stop();
				adsRefresh.stop();
				shell.dispose();
			}
		});

		Button_AboutDevice.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Button_AboutDevice.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Button_AboutDevice
						.setBackground(SWTResourceManager.getColor(38, 18, 10));
			}
		});
		Button_AboutDevice.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				OptionSelect(1);
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		Button_AboutADs.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Button_AboutADs.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Button_AboutADs
						.setBackground(SWTResourceManager.getColor(38, 18, 10));
			}
		});
		Button_AboutADs.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				OptionSelect(2);
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		Button_AboutUpload.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Button_AboutUpload.setBackground(
						SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Button_AboutUpload
						.setBackground(SWTResourceManager.getColor(38, 18, 10));
			}
		});
		Button_AboutUpload.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				OptionSelect(3);
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});
	}

	void OptionSelect(int OptionNum) {
		switch (OptionNum) {
		case 1:
			ContainerDevice.setEnabled(true);
			ContainerDevice.setVisible(true);

			ContainerADs.setEnabled(false);
			ContainerADs.setVisible(false);

			ContainerUpload.setEnabled(false);
			ContainerUpload.setVisible(false);
			break;

		case 2:
			ContainerDevice.setEnabled(false);
			ContainerDevice.setVisible(false);

			ContainerADs.setEnabled(true);
			ContainerADs.setVisible(true);

			ContainerUpload.setEnabled(false);
			ContainerUpload.setVisible(false);
			break;

		case 3:
			ContainerDevice.setEnabled(false);
			ContainerDevice.setVisible(false);

			ContainerADs.setEnabled(false);
			ContainerADs.setVisible(false);

			ContainerUpload.setEnabled(true);
			ContainerUpload.setVisible(true);
			break;
		}
	}
}
