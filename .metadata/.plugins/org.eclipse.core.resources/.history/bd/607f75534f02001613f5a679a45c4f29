package ui;

import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Composite;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.security.MessageDigest;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;

import javax.swing.text.LayeredHighlighter;

import org.eclipse.jface.text.source.DefaultAnnotationHover;
import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.wb.swt.SWTResourceManager;

import ftp.Operations;

import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.events.MouseEvent;
import org.eclipse.swt.events.MouseListener;
import org.eclipse.swt.events.MouseMoveListener;
import org.eclipse.swt.events.MouseTrackListener;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.widgets.Combo;

import vars.*;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.custom.ScrolledComposite;
import org.eclipse.swt.graphics.Point;

public class Main {
	protected Shell shell;
	private Button closeButton;
	private Label DeviceManager;
	private Label AdsManager;
	private Label QuestionsManager;
	private Label Bin_CodeManager;
	private Label FileUpload;
	private Composite DevicesContainer;
	private Label line;
	private Label title2;
	private Label title4;
	private Label title5;
	private Button DeviceRefresh;
	private Composite DeviceItems;
	private Composite AdsContainer;
	private Label label;
	private Label label_1;
	private Combo AdsCombo;
	private Label label_2;
	private Label label_3;
	private Label label_4;
	private Button AdsRefreshs;
	private Composite AdsItems;
	private Composite QuesContainer;
	private Label label_5;
	private Label label_6;
	private Combo QuesCombo;
	private Label label_7;
	private Label label_8;
	private Label label_9;
	private Button QuesRefresh;
	private Composite QuesItems;
	private Composite BinsContainer;
	private Label label_10;
	private Label label_11;
	private Combo BinsCombo;
	private Label label_12;
	private Label label_14;
	private Button BinsRefresh;
	private Composite BinsItems;
	private Composite UploadContainer;
	private Label label_15;
	private Composite composite;
	private Text path;
	private Label label_16;
	private Label label_17;
	private Text price;
	private Button upload;
	private Label label_18;
	private Combo FileType;
	private ScrolledComposite DeviceList;
	private Label label_20;
	private boolean KeyDown;
	private int argx, argy;
	private Composite moveBar;
	private Composite moveBar2;

	void init() {
		KeyDown = false;
		// 初始化显示
		DevicesContainer.setEnabled(false);
		DevicesContainer.setVisible(false);

		AdsContainer.setEnabled(false);
		AdsContainer.setVisible(false);

		QuesContainer.setEnabled(false);
		QuesContainer.setVisible(false);

		BinsContainer.setEnabled(false);
		BinsContainer.setVisible(false);

		UploadContainer.setEnabled(false);
		UploadContainer.setVisible(false);

		// 添加监听器
		moveBar.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				KeyDown = false;
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
				// TODO Auto-generated method stub
				KeyDown = true;
				argx = arg0.x;
				argy = arg0.y;
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
				// TODO Auto-generated method stub

			}
		});
		moveBar.addMouseMoveListener(new MouseMoveListener() {

			@Override
			public void mouseMove(MouseEvent arg0) {
				// TODO Auto-generated method stub
				if (KeyDown)
					shell.setLocation(shell.getLocation().x + arg0.x - argx, shell.getLocation().y + arg0.y - argy);
			}
		});

		moveBar2.addMouseListener(new MouseListener() {

			@Override
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				KeyDown = false;
			}

			@Override
			public void mouseDown(MouseEvent arg0) {
				// TODO Auto-generated method stub
				KeyDown = true;
				argx = arg0.x;
				argy = arg0.y;
			}

			@Override
			public void mouseDoubleClick(MouseEvent arg0) {
				// TODO Auto-generated method stub

			}
		});
		moveBar2.addMouseMoveListener(new MouseMoveListener() {

			@Override
			public void mouseMove(MouseEvent arg0) {
				// TODO Auto-generated method stub
				if (KeyDown)
					shell.setLocation(shell.getLocation().x + arg0.x - argx, shell.getLocation().y + arg0.y - argy);
			}
		});

		
		closeButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				shell.dispose();
			}
		});

		DeviceManager.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				DevicesContainer.setEnabled(true);
				DevicesContainer.setVisible(true);

				AdsContainer.setEnabled(false);
				AdsContainer.setVisible(false);

				QuesContainer.setEnabled(false);
				QuesContainer.setVisible(false);

				BinsContainer.setEnabled(false);
				BinsContainer.setVisible(false);

				UploadContainer.setEnabled(false);
				UploadContainer.setVisible(false);
				new Thread(new Runnable() {
					public void run() {
						try {
							DevicesRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();

			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		DeviceManager.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				DeviceManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				DeviceManager.setBackground(SWTResourceManager.getColor(39, 18, 10));
			}
		});

		AdsManager.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				DevicesContainer.setEnabled(false);
				DevicesContainer.setVisible(false);

				AdsContainer.setEnabled(true);
				AdsContainer.setVisible(true);

				QuesContainer.setEnabled(false);
				QuesContainer.setVisible(false);

				BinsContainer.setEnabled(false);
				BinsContainer.setVisible(false);

				UploadContainer.setEnabled(false);
				UploadContainer.setVisible(false);

				new Thread(new Runnable() {
					public void run() {
						try {
							AdsRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		AdsManager.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				AdsManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				AdsManager.setBackground(SWTResourceManager.getColor(39, 18, 10));
			}
		});

		QuestionsManager.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				DevicesContainer.setEnabled(false);
				DevicesContainer.setVisible(false);

				AdsContainer.setEnabled(false);
				AdsContainer.setVisible(false);

				QuesContainer.setEnabled(true);
				QuesContainer.setVisible(true);

				BinsContainer.setEnabled(false);
				BinsContainer.setVisible(false);

				UploadContainer.setEnabled(false);
				UploadContainer.setVisible(false);

				new Thread(new Runnable() {
					public void run() {
						try {
							DevicesRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		QuestionsManager.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				QuestionsManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				QuestionsManager.setBackground(SWTResourceManager.getColor(39, 18, 10));
			}
		});

		Bin_CodeManager.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				DevicesContainer.setEnabled(false);
				DevicesContainer.setVisible(false);

				AdsContainer.setEnabled(false);
				AdsContainer.setVisible(false);

				QuesContainer.setEnabled(false);
				QuesContainer.setVisible(false);

				BinsContainer.setEnabled(true);
				BinsContainer.setVisible(true);

				UploadContainer.setEnabled(false);
				UploadContainer.setVisible(false);

				new Thread(new Runnable() {
					public void run() {
						try {
							BinsRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		Bin_CodeManager.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				Bin_CodeManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				Bin_CodeManager.setBackground(SWTResourceManager.getColor(39, 18, 10));
			}
		});

		FileUpload.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				DevicesContainer.setEnabled(false);
				DevicesContainer.setVisible(false);

				AdsContainer.setEnabled(false);
				AdsContainer.setVisible(false);

				QuesContainer.setEnabled(false);
				QuesContainer.setVisible(false);

				BinsContainer.setEnabled(false);
				BinsContainer.setVisible(false);

				UploadContainer.setEnabled(true);
				UploadContainer.setVisible(true);

				new Thread(new Runnable() {
					public void run() {
						try {
							DevicesRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		FileUpload.addMouseTrackListener(new MouseTrackListener() {
			public void mouseHover(MouseEvent arg0) {
			}

			public void mouseExit(MouseEvent arg0) {
				FileUpload.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
			}

			public void mouseEnter(MouseEvent arg0) {
				FileUpload.setBackground(SWTResourceManager.getColor(39, 18, 10));
			}
		});

		upload.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub

				try {
					upload();
				} catch (FileNotFoundException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		DeviceRefresh.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				new Thread(new Runnable() {
					public void run() {
						try {
							DevicesRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		AdsRefreshs.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				new Thread(new Runnable() {
					public void run() {
						try {
							AdsRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		QuesRefresh.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				new Thread(new Runnable() {
					public void run() {
						try {
							DevicesRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		BinsRefresh.addMouseListener(new MouseListener() {
			public void mouseUp(MouseEvent arg0) {
				// TODO Auto-generated method stub
				new Thread(new Runnable() {
					public void run() {
						try {
							BinsRefresh();
						} catch (SQLException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}
				}).start();
			}

			public void mouseDown(MouseEvent arg0) {
			}

			public void mouseDoubleClick(MouseEvent arg0) {
			}
		});

		try {
			DevicesRefresh();
		} catch (SQLException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}

	void DevicesRefresh() throws SQLException {
		SQLOperation.Operation sql = new SQLOperation.Operation();
		if (!sql.init()) {
			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					Warning warning = new Warning(getShell(), "广告机列表获取失败");
					warning.open();
				}
			});
			return;
		}

		ResultSet rs = sql.select("device", "*");
		Vars.Devices.clear();
		while (rs.next()) {
			Device tmp = new Device();
			tmp.imei = rs.getString("imei");
			tmp.location = rs.getString("location");
			tmp.nItem = rs.getInt("nItem");
			Vars.Devices.add(tmp);
		}

		Display.getDefault().syncExec(new Runnable() {

			public void run() {
				DeviceItems.dispose();
				DeviceItems = new Composite(DevicesContainer, SWT.NONE);
				DeviceItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				DeviceItems.setBounds(30, 137, 640, 534);

				int i = 1;
				for (Device tmp : Vars.Devices) {
					final int x = i-1;
					Vars.uploadcfg.add(new Button(DeviceList, SWT.CHECK));
					Vars.uploadcfg.get(i - 1).setBounds(10, i * 23 + 10, 648, 17);
					Vars.uploadcfg.get(i - 1).setText("  imei号:" + tmp.imei + "   设备位置:" + tmp.location);
					Vars.uploadcfg.get(i - 1).setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));

					Label nameLable = new Label(DeviceItems, SWT.NONE);
					nameLable.setBounds(10, i * 23, 180, 17);
					nameLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					nameLable.setText(tmp.imei);
					nameLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							DeviceDetail DeviceDetail = new DeviceDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										DevicesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label playcntLable = new Label(DeviceItems, SWT.NONE);
					playcntLable.setBounds(270, i * 23, 120, 17);
					playcntLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					playcntLable.setText(String.valueOf(tmp.location));
					playcntLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							DeviceDetail DeviceDetail = new DeviceDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										DevicesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label priceSumLable = new Label(DeviceItems, SWT.NONE);
					priceSumLable.setBounds(526, i * 23, 100, 17);
					priceSumLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					priceSumLable.setText(String.valueOf(tmp.nItem));
					priceSumLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							DeviceDetail DeviceDetail = new DeviceDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										DevicesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					
					Composite tigger = new Composite(DeviceItems, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					tigger.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							DeviceDetail DeviceDetail = new DeviceDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										DevicesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					i++;
				}
			}

		});
	}

	void AdsRefresh() throws SQLException {
		SQLOperation.Operation sql = new SQLOperation.Operation();
		if (!sql.init()) {
			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					Warning warning = new Warning(getShell(), "视频广告列表获取失败");
					warning.open();
				}
			});
			return;
		}

		ResultSet rs = sql.select("ads", "*");
		Vars.ads.clear();
		while (rs.next()) {
			AdFile tmp = new AdFile();
			tmp.name = rs.getString("name");
			tmp.playCnt = rs.getInt("playCount");
			tmp.price = rs.getFloat("price");
			tmp.md5 = rs.getString("md5");
			Vars.ads.add(tmp);
		}

		Display.getDefault().syncExec(new Runnable() {

			public void run() {
				AdsItems.dispose();
				AdsItems = new Composite(AdsContainer, SWT.NONE);
				AdsItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				AdsItems.setBounds(30, 137, 640, 534);

				int i = 1;
				for (AdFile tmp : Vars.ads) {
					final int x = i-1;
					Label nameLable = new Label(AdsItems, SWT.NONE);
					nameLable.setBounds(10, i * 23, 180, 17);
					nameLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					nameLable.setText(tmp.name);
					nameLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							AdsDetail adsDetail = new AdsDetail(getShell(), SWT.NO_TRIM);
							adsDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										AdsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label playcntLable = new Label(AdsItems, SWT.NONE);
					playcntLable.setBounds(270, i * 23, 120, 17);
					playcntLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					playcntLable.setText(String.valueOf(tmp.price));
					playcntLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							AdsDetail adsDetail = new AdsDetail(getShell(), SWT.NO_TRIM);
							adsDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										AdsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label priceLable = new Label(AdsItems, SWT.NONE);
					priceLable.setBounds(400, i * 23, 120, 17);
					priceLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					priceLable.setText(String.valueOf(tmp.playCnt));
					priceLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							AdsDetail adsDetail = new AdsDetail(getShell(), SWT.NO_TRIM);
							adsDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										AdsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label priceSumLable = new Label(AdsItems, SWT.NONE);
					priceSumLable.setBounds(526, i * 23, 100, 17);
					priceSumLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					priceSumLable.setText(String.valueOf(tmp.price * tmp.playCnt));
					priceSumLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							AdsDetail adsDetail = new AdsDetail(getShell(), SWT.NO_TRIM);
							adsDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										AdsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					
					Composite tigger = new Composite(AdsItems, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					tigger.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							AdsDetail adsDetail = new AdsDetail(getShell(), SWT.NO_TRIM);
							adsDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										AdsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					i++;
				}
			}

		});
	}

	void QuesRefresh() throws SQLException {
		SQLOperation.Operation sql = new SQLOperation.Operation();
		if (!sql.init()) {
			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					Warning warning = new Warning(getShell(), "问卷调查列表获取失败");
					warning.open();
				}
			});
			return;
		}

		ResultSet rs = sql.select("ques", "*");
		Vars.ques.clear();
		while (rs.next()) {
			AdFile tmp = new AdFile();
			tmp.name = rs.getString("name");
			tmp.playCnt = rs.getInt("playCount");
			tmp.price = rs.getFloat("price");
			tmp.md5 = rs.getString("md5");
			Vars.ques.add(tmp);
		}

		Display.getDefault().syncExec(new Runnable() {

			public void run() {
				QuesItems.dispose();
				QuesItems = new Composite(QuesContainer, SWT.NONE);
				QuesItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				QuesItems.setBounds(30, 137, 640, 534);

				int i = 1;
				for (AdFile tmp : Vars.ques) {
					final int x = i-1;
					Label nameLable = new Label(QuesItems, SWT.NONE);
					nameLable.setBounds(10, i * 23, 180, 17);
					nameLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					nameLable.setText(tmp.name);
					nameLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							QuesDetail DeviceDetail = new QuesDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										QuesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label playcntLable = new Label(QuesItems, SWT.NONE);
					playcntLable.setBounds(270, i * 23, 120, 17);
					playcntLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					playcntLable.setText(String.valueOf(tmp.price));
					playcntLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							QuesDetail DeviceDetail = new QuesDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										QuesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label priceLable = new Label(QuesItems, SWT.NONE);
					priceLable.setBounds(400, i * 23, 120, 17);
					priceLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					priceLable.setText(String.valueOf(tmp.playCnt));
					priceLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							QuesDetail DeviceDetail = new QuesDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										QuesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label priceSumLable = new Label(QuesItems, SWT.NONE);
					priceSumLable.setBounds(526, i * 23, 100, 17);
					priceSumLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					priceSumLable.setText(String.valueOf(tmp.price * tmp.playCnt));
					priceSumLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							QuesDetail DeviceDetail = new QuesDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										QuesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					
					Composite tigger = new Composite(QuesItems, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					tigger.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							QuesDetail DeviceDetail = new QuesDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										QuesRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					i++;
				}
			}

		});
	}

	void BinsRefresh() throws SQLException {
		SQLOperation.Operation sql = new SQLOperation.Operation();
		if (!sql.init()) {
			Display.getDefault().syncExec(new Runnable() {
				public void run() {
					Warning warning = new Warning(getShell(), "二维码列表获取失败");
					warning.open();
				}
			});
			return;
		}

		ResultSet rs = sql.select("bins", "*");
		Vars.bins.clear();
		while (rs.next()) {
			AdFile tmp = new AdFile();
			tmp.name = rs.getString("name");
			tmp.playCnt = rs.getInt("playCount");
			tmp.price = rs.getFloat("price");
			tmp.md5 = rs.getString("md5");
			Vars.bins.add(tmp);
		}

		Display.getDefault().syncExec(new Runnable() {

			public void run() {
				BinsItems.dispose();
				BinsItems = new Composite(BinsContainer, SWT.NONE);
				BinsItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
				BinsItems.setBounds(30, 137, 640, 534);

				int i = 1;
				for (AdFile tmp : Vars.bins) {
					final int x = i-1;
					Label nameLable = new Label(BinsItems, SWT.NONE);
					nameLable.setBounds(10, i * 23, 180, 17);
					nameLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					nameLable.setText(tmp.name);
					nameLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							BinsDetail DeviceDetail = new BinsDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										BinsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});

					Label priceSumLable = new Label(BinsItems, SWT.NONE);
					priceSumLable.setBounds(526, i * 23, 100, 17);
					priceSumLable.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					priceSumLable.setText(String.valueOf(tmp.price));
					priceSumLable.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							BinsDetail DeviceDetail = new BinsDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										BinsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					
					Composite tigger = new Composite(BinsItems, SWT.NONE);
					tigger.setBounds(10, i * 23, 648, 23);
					tigger.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
					tigger.addMouseListener(new MouseListener() {
						public void mouseUp(MouseEvent arg0) {
							// TODO Auto-generated method stub
							BinsDetail DeviceDetail = new BinsDetail(getShell(), SWT.NO_TRIM);
							DeviceDetail.open(x);
							new Thread(new Runnable() {
								public void run() {
									try {
										BinsRefresh();
									} catch (SQLException e) {
										// TODO Auto-generated catch block
										e.printStackTrace();
									}
								}
							}).start();
						}
						
						public void mouseDown(MouseEvent arg0) {}
						public void mouseDoubleClick(MouseEvent arg0) {}
					});
					i++;
				}
			}

		});
	}

	void upload() throws FileNotFoundException {
		File file = new File(path.getText());
		String ErrorMessage = null;
		if (!file.exists() || file.isDirectory()) {
			ErrorMessage = "文件路径错误";
		}
		if (FileType.getSelectionIndex() == -1) {
			ErrorMessage = "请选择文件的类别";
		}
		try {
			Float.valueOf(price.getText());
		} catch (Exception e) {
			ErrorMessage = "请填写正确的小数";
		}
		boolean checked = false;
		for (Button tmp : Vars.uploadcfg) {
			if (tmp.getSelection()) {
				checked = true;
				break;
			}
		}
		if (!checked) {
			ErrorMessage = "请至少勾选一个设备";
		}

		if (ErrorMessage != null) {
			final String cover = ErrorMessage;
			new Thread(new Runnable() {
				public void run() {
					Display.getDefault().syncExec(new Runnable() {
						public void run() {
							Warning warning = new Warning(getShell(), cover);
							warning.open();
						}
					});
				}
			}).start();
			return;
		}

		String name = file.getName();
		if (name.indexOf('.') != -1)
			name = name.substring(0, name.indexOf('.'));

		AdFile temp = new AdFile();
		temp.name = name;
		temp.md5 = getMd5ByFile(file);
		temp.playCnt = 0;
		temp.price = Float.valueOf(price.getText());
		int i = 0;
		for (Button tmp : Vars.uploadcfg) {
			if (tmp.getSelection()) {
				temp.imei.add(Vars.Devices.get(i).imei);
			}
			i++;
		}

		Operations ftp = new Operations();
		DBConnectionForUpload(name, temp.md5);

		switch (FileType.getSelectionIndex()) {
		case 0:
			ftp.upload(file, "/ADmachine/ads", temp.name);
			break;

		case 1:
			ftp.upload(file, "/ADmachine/questions", temp.name);
			break;

		case 2:
			ftp.upload(file, "/ADmachine/bin-pictures", temp.name);
			break;

		default:
			break;
		}

		new Thread(new Runnable() {
			public void run() {
				Display.getDefault().syncExec(new Runnable() {
					public void run() {
						Warning warning = new Warning(getShell(), "上传完成");
						warning.open();
					}
				});
			}
		}).start();
	}

	void DBConnectionForUpload(String name, String md5) {
		// 驱动程序名//不固定，根据驱动
		String driver = "com.mysql.jdbc.Driver";
		// URL指向要访问的数据库名******
		String url = "jdbc:mysql://" + Vars.ip + ":3306/ADmachine";
		// MySQL配置时的用户名
		String user = Vars.sqlName;
		// Java连接MySQL配置时的密码******
		String password = Vars.sqlPasswd;

		try {
			// 加载驱动程序
			Class.forName(driver);

			// 连续数据库
			Connection conn = DriverManager.getConnection(url, user, password);
			if (!conn.isClosed())
				System.out.println("Succeeded connecting to the Database!");

			// statement用来执行SQL语句
			Statement statement = conn.createStatement();

			switch (FileType.getSelectionIndex()) {
			case 0:
				statement.executeUpdate("insert into ads values (" + "\"" + name + "\"" + ", 0" + ", " + price.getText()
						+ ", \"" + md5 + "\")");
				statement.executeUpdate("create table ads" + name + "(imei char(32) not null)");
				for (int i = 0; i < Vars.uploadcfg.size(); i++) {
					if (Vars.uploadcfg.get(i).getSelection())
						statement.executeUpdate(
								"insert into ads" + name + " values (\"" + Vars.Devices.get(i).imei + "\" )");
				}
				break;
			case 1:
				statement.executeUpdate("insert into ques values (" + "\"" + name + "\"" + ", 0" + ", "
						+ price.getText() + ", \"" + md5 + "\")");
				statement.executeUpdate("create table ques" + name + "(imei char(32) not null)");
				statement.executeUpdate("create table ans" + name + "(ans char(127) not null)");
				for (int i = 0; i < Vars.uploadcfg.size(); i++) {
					if (Vars.uploadcfg.get(i).getSelection())
						statement.executeUpdate(
								"insert into ques" + name + " values (\"" + Vars.Devices.get(i).imei + "\")");
				}
				break;

			case 2:
				statement.executeUpdate("insert into bins values (" + "\"" + name + "\"" + ", 0" + ", "
						+ price.getText() + ", \"" + md5 + "\")");
				statement.executeUpdate("create table bins" + name + "(imei char(32) not null)");
				for (int i = 0; i < Vars.uploadcfg.size(); i++) {
					if (Vars.uploadcfg.get(i).getSelection())
						statement.executeUpdate(
								"insert into bins" + name + " values (\"" + Vars.Devices.get(i).imei + "\")");
				}
				break;
			}
			conn.close();
		} catch (ClassNotFoundException e) {
			System.out.println("Sorry,can`t find the Driver!");
			e.printStackTrace();
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	String getMd5ByFile(File file) throws FileNotFoundException {
		String value = null;
		FileInputStream in = new FileInputStream(file);
		try {
			MappedByteBuffer byteBuffer = in.getChannel().map(FileChannel.MapMode.READ_ONLY, 0, file.length());
			MessageDigest md5 = MessageDigest.getInstance("MD5");
			md5.update(byteBuffer);
			BigInteger bi = new BigInteger(1, md5.digest());
			value = bi.toString(16);
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			if (null != in) {
				try {
					in.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
		return value;
	}

	public static void main(String[] args) {
		try {
			Main window = new Main();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public void open() {
		Display display = Display.getDefault();
		createContents();
		init();
		shell.open();
		shell.layout();
		while (!shell.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}

	protected void createContents() {
		shell = new Shell(SWT.NO_TRIM);
		shell.setSize(1000, 700);
		shell.setText("ServerCtrl");

		Composite background = new Composite(shell, SWT.NONE);
		background.setForeground(SWTResourceManager.getColor(SWT.COLOR_BLACK));
		background.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		background.setBounds(0, 0, 1000, 700);
		background.setBackgroundImage(SWTResourceManager.getImage(Main.class, "/UIImage/background.png"));
		
		moveBar2 = new Composite(background, SWT.NONE);
		moveBar2.setLocation(300, 0);
		moveBar2.setSize(700, 20);
		moveBar2.setForeground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		moveBar2.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));

		Composite options = new Composite(background, SWT.NONE);
		options.setBounds(0, 0, 300, 700);
		options.setBackgroundImage(SWTResourceManager.getImage(Main.class, "/UIImage/OptionsBackground.png"));

		closeButton = new Button(options, SWT.CENTER);
		closeButton.setForeground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		closeButton.setImage(SWTResourceManager.getImage(Main.class, "/UIImage/close.png"));
		closeButton.setBounds(20, 20, 20, 20);
		
		moveBar = new Composite(options, SWT.NONE);
		moveBar.setLocation(0, 0);
		moveBar.setSize(300, 20);
		moveBar.setForeground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		moveBar.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));

		Label title1 = new Label(options, SWT.SHADOW_NONE | SWT.CENTER);
		title1.setForeground(SWTResourceManager.getColor(SWT.COLOR_GRAY));
		title1.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		title1.setFont(SWTResourceManager.getFont("Ubuntu", 30, SWT.BOLD));
		title1.setAlignment(SWT.CENTER);
		title1.setBounds(10, 60, 280, 123);
		title1.setText("Server Control System beta");

		DeviceManager = new Label(options, SWT.CENTER);
		DeviceManager.setForeground(SWTResourceManager.getColor(SWT.COLOR_GRAY));
		DeviceManager.setTouchEnabled(true);
		DeviceManager.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 30, SWT.NORMAL));
		DeviceManager.setAlignment(SWT.CENTER);
		DeviceManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		DeviceManager.setBounds(0, 250, 300, 70);
		DeviceManager.setText("\u8BBE\u5907\u7BA1\u7406");

		AdsManager = new Label(options, SWT.CENTER);
		AdsManager.setTouchEnabled(true);
		AdsManager.setText("\u89C6\u9891\u5E7F\u544A");
		AdsManager.setForeground(SWTResourceManager.getColor(SWT.COLOR_GRAY));
		AdsManager.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 30, SWT.NORMAL));
		AdsManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		AdsManager.setAlignment(SWT.CENTER);
		AdsManager.setBounds(0, 326, 300, 70);

		QuestionsManager = new Label(options, SWT.CENTER);
		QuestionsManager.setTouchEnabled(true);
		QuestionsManager.setText("\u95EE\u5377\u8C03\u67E5");
		QuestionsManager.setForeground(SWTResourceManager.getColor(SWT.COLOR_GRAY));
		QuestionsManager.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 30, SWT.NORMAL));
		QuestionsManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		QuestionsManager.setAlignment(SWT.CENTER);
		QuestionsManager.setBounds(0, 402, 300, 70);

		Bin_CodeManager = new Label(options, SWT.CENTER);
		Bin_CodeManager.setTouchEnabled(true);
		Bin_CodeManager.setText("\u4E8C\u7EF4\u7801\u7BA1\u7406");
		Bin_CodeManager.setForeground(SWTResourceManager.getColor(SWT.COLOR_GRAY));
		Bin_CodeManager.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 30, SWT.NORMAL));
		Bin_CodeManager.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		Bin_CodeManager.setAlignment(SWT.CENTER);
		Bin_CodeManager.setBounds(0, 478, 300, 70);

		FileUpload = new Label(options, SWT.CENTER);
		FileUpload.setTouchEnabled(true);
		FileUpload.setText("\u6587\u4EF6\u4E0A\u4F20");
		FileUpload.setForeground(SWTResourceManager.getColor(SWT.COLOR_GRAY));
		FileUpload.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 30, SWT.NORMAL));
		FileUpload.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		FileUpload.setAlignment(SWT.CENTER);
		FileUpload.setBounds(0, 554, 300, 70);

		DevicesContainer = new Composite(background, SWT.NONE);
		DevicesContainer.setLocation(300, 0);
		DevicesContainer.setSize(700, 700);
		DevicesContainer.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));

		line = new Label(DevicesContainer, SWT.NONE);
		line.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
		line.setLocation(30, 130);
		line.setBackground(SWTResourceManager.getColor(SWT.COLOR_DARK_GRAY));
		line.setSize(640, 1);

		title2 = new Label(DevicesContainer, SWT.NONE);
		title2.setFont(SWTResourceManager.getFont("微软雅黑", 12, SWT.NORMAL));
		title2.setBounds(40, 45, 73, 25);
		title2.setText("\u6392\u5E8F\u4F9D\u636E\uFF1A");

		Combo DeviceCombo = new Combo(DevicesContainer, SWT.READ_ONLY);
		DeviceCombo.setItems(
				new String[] { "IMEI\u53F7\u7801", "\u6240\u5728\u5730", "\u5269\u4F59\u7269\u54C1\u6570\u91CF" });
		DeviceCombo.setBounds(119, 46, 133, 25);
		DeviceCombo.select(0);

		Label title3 = new Label(DevicesContainer, SWT.NONE);
		title3.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		title3.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		title3.setBounds(40, 100, 73, 25);
		title3.setText("IMEI\u7F16\u53F7");

		title4 = new Label(DevicesContainer, SWT.NONE);
		title4.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		title4.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		title4.setBounds(300, 100, 61, 25);
		title4.setText("\u6240\u5728\u5730");

		title5 = new Label(DevicesContainer, SWT.NONE);
		title5.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		title5.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		title5.setBounds(556, 100, 105, 25);
		title5.setText("\u5269\u4F59\u7269\u54C1\u6570\u91CF");

		DeviceRefresh = new Button(DevicesContainer, SWT.NONE);
		DeviceRefresh.setImage(SWTResourceManager.getImage(Main.class, "/UIImage/refresh.png"));
		DeviceRefresh.setBounds(627, 45, 25, 25);

		DeviceItems = new Composite(DevicesContainer, SWT.NONE);
		DeviceItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		DeviceItems.setBounds(30, 137, 640, 534);

		AdsContainer = new Composite(background, SWT.NONE);
		AdsContainer.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		AdsContainer.setBounds(300, 0, 700, 700);

		label = new Label(AdsContainer, SWT.NONE);
		label.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
		label.setBackground(SWTResourceManager.getColor(SWT.COLOR_DARK_GRAY));
		label.setBounds(30, 130, 640, 1);

		label_1 = new Label(AdsContainer, SWT.NONE);
		label_1.setText("\u6392\u5E8F\u4F9D\u636E\uFF1A");
		label_1.setFont(SWTResourceManager.getFont("微软雅黑", 12, SWT.NORMAL));
		label_1.setBounds(40, 45, 73, 25);

		AdsCombo = new Combo(AdsContainer, SWT.READ_ONLY);
		AdsCombo.setItems(new String[] { "\u540D\u79F0", "\u64AD\u653E\u6B21\u6570", "\u5355\u4EF7", "\u603B\u4EF7" });
		AdsCombo.setBounds(119, 46, 133, 25);
		AdsCombo.select(0);

		label_2 = new Label(AdsContainer, SWT.NONE);
		label_2.setText("\u540D\u79F0");
		label_2.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_2.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_2.setBounds(40, 100, 73, 25);

		label_3 = new Label(AdsContainer, SWT.NONE);
		label_3.setText("\u5355\u4EF7");
		label_3.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_3.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_3.setBounds(300, 100, 61, 25);

		label_15 = new Label(AdsContainer, SWT.NONE);
		label_15.setText("\u64AD\u653E\u6B21\u6570");
		label_15.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_15.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_15.setBounds(430, 100, 80, 25);

		label_4 = new Label(AdsContainer, SWT.NONE);
		label_4.setText("\u603B\u4EF7");
		label_4.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_4.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_4.setBounds(556, 100, 105, 25);

		AdsRefreshs = new Button(AdsContainer, SWT.NONE);
		AdsRefreshs.setImage(SWTResourceManager.getImage(Main.class, "/UIImage/refresh.png"));
		AdsRefreshs.setBounds(627, 45, 25, 25);

		AdsItems = new Composite(AdsContainer, SWT.NONE);
		AdsItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		AdsItems.setBounds(30, 137, 640, 534);

		QuesContainer = new Composite(background, SWT.NONE);
		QuesContainer.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		QuesContainer.setBounds(300, 0, 700, 700);

		label_5 = new Label(QuesContainer, SWT.NONE);
		label_5.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
		label_5.setBackground(SWTResourceManager.getColor(SWT.COLOR_DARK_GRAY));
		label_5.setBounds(30, 130, 640, 1);

		label_6 = new Label(QuesContainer, SWT.NONE);
		label_6.setText("\u6392\u5E8F\u4F9D\u636E\uFF1A");
		label_6.setFont(SWTResourceManager.getFont("微软雅黑", 12, SWT.NORMAL));
		label_6.setBounds(40, 45, 73, 25);

		QuesCombo = new Combo(QuesContainer, SWT.READ_ONLY);
		QuesCombo.setItems(new String[] { "\u540D\u79F0", "\u64AD\u653E\u6B21\u6570", "\u5355\u4EF7", "\u603B\u4EF7" });
		QuesCombo.setBounds(119, 46, 133, 25);
		QuesCombo.select(0);

		label_7 = new Label(QuesContainer, SWT.NONE);
		label_7.setText("\u540D\u79F0");
		label_7.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_7.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_7.setBounds(40, 100, 73, 25);

		label_8 = new Label(QuesContainer, SWT.NONE);
		label_8.setText("\u5355\u4EF7");
		label_8.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_8.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_8.setBounds(300, 100, 61, 25);

		Label label_13 = new Label(QuesContainer, SWT.NONE);
		label_13.setText("\u64AD\u653E\u6B21\u6570");
		label_13.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_13.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_13.setBounds(430, 100, 80, 25);

		label_9 = new Label(QuesContainer, SWT.NONE);
		label_9.setText("\u603B\u4EF7");
		label_9.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_9.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_9.setBounds(556, 100, 105, 25);

		QuesRefresh = new Button(QuesContainer, SWT.NONE);
		QuesRefresh.setImage(SWTResourceManager.getImage(Main.class, "/UIImage/refresh.png"));
		QuesRefresh.setBounds(627, 45, 25, 25);

		QuesItems = new Composite(QuesContainer, SWT.NONE);
		QuesItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		QuesItems.setBounds(30, 137, 640, 534);

		BinsContainer = new Composite(background, SWT.NONE);
		BinsContainer.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		BinsContainer.setBounds(300, 0, 700, 700);

		label_10 = new Label(BinsContainer, SWT.NONE);
		label_10.setForeground(SWTResourceManager.getColor(SWT.COLOR_RED));
		label_10.setBackground(SWTResourceManager.getColor(SWT.COLOR_DARK_GRAY));
		label_10.setBounds(30, 130, 640, 1);

		label_11 = new Label(BinsContainer, SWT.NONE);
		label_11.setText("\u6392\u5E8F\u4F9D\u636E\uFF1A");
		label_11.setFont(SWTResourceManager.getFont("微软雅黑", 12, SWT.NORMAL));
		label_11.setBounds(40, 45, 73, 25);

		BinsCombo = new Combo(BinsContainer, SWT.READ_ONLY);
		BinsCombo.setItems(new String[] { "\u540D\u79F0", "\u5355\u4EF7" });
		BinsCombo.setBounds(119, 46, 133, 25);
		BinsCombo.select(0);

		label_12 = new Label(BinsContainer, SWT.NONE);
		label_12.setText("\u540D\u79F0");
		label_12.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_12.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_12.setBounds(40, 100, 73, 25);

		label_14 = new Label(BinsContainer, SWT.NONE);
		label_14.setText("\u5355\u4EF7");
		label_14.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 12, SWT.NORMAL));
		label_14.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_14.setBounds(556, 100, 105, 25);

		BinsRefresh = new Button(BinsContainer, SWT.NONE);
		BinsRefresh.setImage(SWTResourceManager.getImage(Main.class, "/UIImage/refresh.png"));
		BinsRefresh.setBounds(627, 45, 25, 25);

		BinsItems = new Composite(BinsContainer, SWT.NONE);
		BinsItems.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		BinsItems.setBounds(30, 137, 640, 534);

		UploadContainer = new Composite(background, SWT.NONE);
		UploadContainer.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		UploadContainer.setBounds(300, 0, 700, 700);

		composite = new Composite(UploadContainer, SWT.NONE);
		composite.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		composite.setBounds(0, 0, 700, 700);

		label_18 = new Label(composite, SWT.NONE);
		label_18.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_18.setText("\u6587\u4EF6\u7C7B\u578B             \uFF1A");
		label_18.setBounds(27, 33, 111, 17);

		FileType = new Combo(composite, SWT.READ_ONLY);
		FileType.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		FileType.setItems(
				new String[] { "\u89C6\u9891\u6587\u4EF6", "\u95EE\u5377\u8C03\u67E5", "\u4E8C\u7EF4\u7801" });
		FileType.setBounds(144, 30, 531, 25);
		FileType.select(0);

		label_16 = new Label(composite, SWT.NONE);
		label_16.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_16.setText("\u6587\u4EF6\u7EDD\u5BF9\u8DEF\u5F84  \uFF1A");
		label_16.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 11, SWT.NORMAL));
		label_16.setBounds(27, 79, 111, 23);

		path = new Text(composite, SWT.BORDER);
		path.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		path.setText("\u8BF7\u586B\u5199\u6587\u4EF6\u7EDD\u5BF9\u8DEF\u5F84");
		path.setBounds(144, 79, 531, 23);

		label_17 = new Label(composite, SWT.NONE);
		label_17.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_17.setText("\u5355\u4EF7                 \uFF1A");
		label_17.setFont(SWTResourceManager.getFont("Microsoft YaHei UI", 11, SWT.NORMAL));
		label_17.setBounds(27, 134, 111, 23);

		price = new Text(composite, SWT.BORDER);
		price.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		price.setText("\u8BF7\u586B\u5199\u5355\u4EF7");
		price.setBounds(144, 134, 531, 23);

		upload = new Button(composite, SWT.NONE);
		upload.setText("\u4E0A\u4F20");
		upload.setBounds(250, 650, 216, 27);

		DeviceList = new ScrolledComposite(composite, SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL);
		DeviceList.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		DeviceList.setExpandVertical(true);
		DeviceList.setExpandHorizontal(true);
		DeviceList.setBounds(27, 163, 648, 456);
		DeviceList.setMinSize(new Point(64, 64));

		label_20 = new Label(composite, SWT.NONE);
		label_20.setBackground(SWTResourceManager.getColor(SWT.COLOR_TRANSPARENT));
		label_20.setText("\u8B66\u544A\uFF1A\u8BF7\u4F7F\u7528\u82F1\u6587\u5B57\u7B26");
		label_20.setAlignment(SWT.CENTER);
		label_20.setBounds(480, 670, 216, 17);
	}

	public Shell getShell() {
		return shell;
	}
	public Composite getMoveBar() {
		return moveBar;
	}
}
